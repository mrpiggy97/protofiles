// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomClient is the client API for Random service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomClient interface {
	AddRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (Random_AddRandomNumberClient, error)
	SubstractRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (Random_SubstractRandomNumberClient, error)
}

type randomClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomClient(cc grpc.ClientConnInterface) RandomClient {
	return &randomClient{cc}
}

func (c *randomClient) AddRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (Random_AddRandomNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &Random_ServiceDesc.Streams[0], "/numbers.Random/AddRandomNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomAddRandomNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Random_AddRandomNumberClient interface {
	Recv() (*RandomNumberResponse, error)
	grpc.ClientStream
}

type randomAddRandomNumberClient struct {
	grpc.ClientStream
}

func (x *randomAddRandomNumberClient) Recv() (*RandomNumberResponse, error) {
	m := new(RandomNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *randomClient) SubstractRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (Random_SubstractRandomNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &Random_ServiceDesc.Streams[1], "/numbers.Random/SubstractRandomNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomSubstractRandomNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Random_SubstractRandomNumberClient interface {
	Recv() (*RandomNumberResponse, error)
	grpc.ClientStream
}

type randomSubstractRandomNumberClient struct {
	grpc.ClientStream
}

func (x *randomSubstractRandomNumberClient) Recv() (*RandomNumberResponse, error) {
	m := new(RandomNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomServer is the server API for Random service.
// All implementations must embed UnimplementedRandomServer
// for forward compatibility
type RandomServer interface {
	AddRandomNumber(*RandomNumberRequest, Random_AddRandomNumberServer) error
	SubstractRandomNumber(*RandomNumberRequest, Random_SubstractRandomNumberServer) error
	mustEmbedUnimplementedRandomServer()
}

// UnimplementedRandomServer must be embedded to have forward compatible implementations.
type UnimplementedRandomServer struct {
}

func (UnimplementedRandomServer) AddRandomNumber(*RandomNumberRequest, Random_AddRandomNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method AddRandomNumber not implemented")
}
func (UnimplementedRandomServer) SubstractRandomNumber(*RandomNumberRequest, Random_SubstractRandomNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method SubstractRandomNumber not implemented")
}
func (UnimplementedRandomServer) mustEmbedUnimplementedRandomServer() {}

// UnsafeRandomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomServer will
// result in compilation errors.
type UnsafeRandomServer interface {
	mustEmbedUnimplementedRandomServer()
}

func RegisterRandomServer(s grpc.ServiceRegistrar, srv RandomServer) {
	s.RegisterService(&Random_ServiceDesc, srv)
}

func _Random_AddRandomNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomServer).AddRandomNumber(m, &randomAddRandomNumberServer{stream})
}

type Random_AddRandomNumberServer interface {
	Send(*RandomNumberResponse) error
	grpc.ServerStream
}

type randomAddRandomNumberServer struct {
	grpc.ServerStream
}

func (x *randomAddRandomNumberServer) Send(m *RandomNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Random_SubstractRandomNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomServer).SubstractRandomNumber(m, &randomSubstractRandomNumberServer{stream})
}

type Random_SubstractRandomNumberServer interface {
	Send(*RandomNumberResponse) error
	grpc.ServerStream
}

type randomSubstractRandomNumberServer struct {
	grpc.ServerStream
}

func (x *randomSubstractRandomNumberServer) Send(m *RandomNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Random_ServiceDesc is the grpc.ServiceDesc for Random service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Random_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "numbers.Random",
	HandlerType: (*RandomServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddRandomNumber",
			Handler:       _Random_AddRandomNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubstractRandomNumber",
			Handler:       _Random_SubstractRandomNumber_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofiles/RandomNumber.proto",
}
