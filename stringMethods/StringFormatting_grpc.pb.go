// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stringMethods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringFormattingClient is the client API for StringFormatting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringFormattingClient interface {
	ToCamelCase(ctx context.Context, in *FormattingRequest, opts ...grpc.CallOption) (*FormattingResponse, error)
	ToLowerCase(ctx context.Context, in *FormattingRequest, opts ...grpc.CallOption) (*FormattingResponse, error)
	ToUpperCase(ctx context.Context, in *FormattingRequest, opts ...grpc.CallOption) (*FormattingResponse, error)
}

type stringFormattingClient struct {
	cc grpc.ClientConnInterface
}

func NewStringFormattingClient(cc grpc.ClientConnInterface) StringFormattingClient {
	return &stringFormattingClient{cc}
}

func (c *stringFormattingClient) ToCamelCase(ctx context.Context, in *FormattingRequest, opts ...grpc.CallOption) (*FormattingResponse, error) {
	out := new(FormattingResponse)
	err := c.cc.Invoke(ctx, "/strings.StringFormatting/ToCamelCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringFormattingClient) ToLowerCase(ctx context.Context, in *FormattingRequest, opts ...grpc.CallOption) (*FormattingResponse, error) {
	out := new(FormattingResponse)
	err := c.cc.Invoke(ctx, "/strings.StringFormatting/ToLowerCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringFormattingClient) ToUpperCase(ctx context.Context, in *FormattingRequest, opts ...grpc.CallOption) (*FormattingResponse, error) {
	out := new(FormattingResponse)
	err := c.cc.Invoke(ctx, "/strings.StringFormatting/ToUpperCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringFormattingServer is the server API for StringFormatting service.
// All implementations must embed UnimplementedStringFormattingServer
// for forward compatibility
type StringFormattingServer interface {
	ToCamelCase(context.Context, *FormattingRequest) (*FormattingResponse, error)
	ToLowerCase(context.Context, *FormattingRequest) (*FormattingResponse, error)
	ToUpperCase(context.Context, *FormattingRequest) (*FormattingResponse, error)
	mustEmbedUnimplementedStringFormattingServer()
}

// UnimplementedStringFormattingServer must be embedded to have forward compatible implementations.
type UnimplementedStringFormattingServer struct {
}

func (UnimplementedStringFormattingServer) ToCamelCase(context.Context, *FormattingRequest) (*FormattingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToCamelCase not implemented")
}
func (UnimplementedStringFormattingServer) ToLowerCase(context.Context, *FormattingRequest) (*FormattingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToLowerCase not implemented")
}
func (UnimplementedStringFormattingServer) ToUpperCase(context.Context, *FormattingRequest) (*FormattingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToUpperCase not implemented")
}
func (UnimplementedStringFormattingServer) mustEmbedUnimplementedStringFormattingServer() {}

// UnsafeStringFormattingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringFormattingServer will
// result in compilation errors.
type UnsafeStringFormattingServer interface {
	mustEmbedUnimplementedStringFormattingServer()
}

func RegisterStringFormattingServer(s grpc.ServiceRegistrar, srv StringFormattingServer) {
	s.RegisterService(&StringFormatting_ServiceDesc, srv)
}

func _StringFormatting_ToCamelCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormattingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringFormattingServer).ToCamelCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strings.StringFormatting/ToCamelCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringFormattingServer).ToCamelCase(ctx, req.(*FormattingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringFormatting_ToLowerCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormattingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringFormattingServer).ToLowerCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strings.StringFormatting/ToLowerCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringFormattingServer).ToLowerCase(ctx, req.(*FormattingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringFormatting_ToUpperCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormattingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringFormattingServer).ToUpperCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strings.StringFormatting/ToUpperCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringFormattingServer).ToUpperCase(ctx, req.(*FormattingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StringFormatting_ServiceDesc is the grpc.ServiceDesc for StringFormatting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringFormatting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strings.StringFormatting",
	HandlerType: (*StringFormattingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToCamelCase",
			Handler:    _StringFormatting_ToCamelCase_Handler,
		},
		{
			MethodName: "ToLowerCase",
			Handler:    _StringFormatting_ToLowerCase_Handler,
		},
		{
			MethodName: "ToUpperCase",
			Handler:    _StringFormatting_ToUpperCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/StringFormatting.proto",
}
