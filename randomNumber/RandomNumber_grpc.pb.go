// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package randomNumber

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomServiceClient is the client API for RandomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomServiceClient interface {
	AddRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (RandomService_AddRandomNumberClient, error)
	SubstractRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (RandomService_SubstractRandomNumberClient, error)
}

type randomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomServiceClient(cc grpc.ClientConnInterface) RandomServiceClient {
	return &randomServiceClient{cc}
}

func (c *randomServiceClient) AddRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (RandomService_AddRandomNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandomService_ServiceDesc.Streams[0], "/numbers.RandomService/AddRandomNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomServiceAddRandomNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RandomService_AddRandomNumberClient interface {
	Recv() (*RandomNumberResponse, error)
	grpc.ClientStream
}

type randomServiceAddRandomNumberClient struct {
	grpc.ClientStream
}

func (x *randomServiceAddRandomNumberClient) Recv() (*RandomNumberResponse, error) {
	m := new(RandomNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *randomServiceClient) SubstractRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (RandomService_SubstractRandomNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandomService_ServiceDesc.Streams[1], "/numbers.RandomService/SubstractRandomNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomServiceSubstractRandomNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RandomService_SubstractRandomNumberClient interface {
	Recv() (*RandomNumberResponse, error)
	grpc.ClientStream
}

type randomServiceSubstractRandomNumberClient struct {
	grpc.ClientStream
}

func (x *randomServiceSubstractRandomNumberClient) Recv() (*RandomNumberResponse, error) {
	m := new(RandomNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomServiceServer is the server API for RandomService service.
// All implementations must embed UnimplementedRandomServiceServer
// for forward compatibility
type RandomServiceServer interface {
	AddRandomNumber(*RandomNumberRequest, RandomService_AddRandomNumberServer) error
	SubstractRandomNumber(*RandomNumberRequest, RandomService_SubstractRandomNumberServer) error
	mustEmbedUnimplementedRandomServiceServer()
}

// UnimplementedRandomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRandomServiceServer struct {
}

func (UnimplementedRandomServiceServer) AddRandomNumber(*RandomNumberRequest, RandomService_AddRandomNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method AddRandomNumber not implemented")
}
func (UnimplementedRandomServiceServer) SubstractRandomNumber(*RandomNumberRequest, RandomService_SubstractRandomNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method SubstractRandomNumber not implemented")
}
func (UnimplementedRandomServiceServer) mustEmbedUnimplementedRandomServiceServer() {}

// UnsafeRandomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomServiceServer will
// result in compilation errors.
type UnsafeRandomServiceServer interface {
	mustEmbedUnimplementedRandomServiceServer()
}

func RegisterRandomServiceServer(s grpc.ServiceRegistrar, srv RandomServiceServer) {
	s.RegisterService(&RandomService_ServiceDesc, srv)
}

func _RandomService_AddRandomNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomServiceServer).AddRandomNumber(m, &randomServiceAddRandomNumberServer{stream})
}

type RandomService_AddRandomNumberServer interface {
	Send(*RandomNumberResponse) error
	grpc.ServerStream
}

type randomServiceAddRandomNumberServer struct {
	grpc.ServerStream
}

func (x *randomServiceAddRandomNumberServer) Send(m *RandomNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RandomService_SubstractRandomNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomServiceServer).SubstractRandomNumber(m, &randomServiceSubstractRandomNumberServer{stream})
}

type RandomService_SubstractRandomNumberServer interface {
	Send(*RandomNumberResponse) error
	grpc.ServerStream
}

type randomServiceSubstractRandomNumberServer struct {
	grpc.ServerStream
}

func (x *randomServiceSubstractRandomNumberServer) Send(m *RandomNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RandomService_ServiceDesc is the grpc.ServiceDesc for RandomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "numbers.RandomService",
	HandlerType: (*RandomServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddRandomNumber",
			Handler:       _RandomService_AddRandomNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubstractRandomNumber",
			Handler:       _RandomService_SubstractRandomNumber_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofiles/RandomNumber.proto",
}
