// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protofiles/Primes.proto

package primes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeServiceClient is the client API for PrimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeServiceClient interface {
	GetCount(ctx context.Context, opts ...grpc.CallOption) (PrimeService_GetCountClient, error)
}

type primeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeServiceClient(cc grpc.ClientConnInterface) PrimeServiceClient {
	return &primeServiceClient{cc}
}

func (c *primeServiceClient) GetCount(ctx context.Context, opts ...grpc.CallOption) (PrimeService_GetCountClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeService_ServiceDesc.Streams[0], "/PrimeService/GetCount", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeServiceGetCountClient{stream}
	return x, nil
}

type PrimeService_GetCountClient interface {
	Send(*PrimeRequest) error
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type primeServiceGetCountClient struct {
	grpc.ClientStream
}

func (x *primeServiceGetCountClient) Send(m *PrimeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *primeServiceGetCountClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeServiceServer is the server API for PrimeService service.
// All implementations must embed UnimplementedPrimeServiceServer
// for forward compatibility
type PrimeServiceServer interface {
	GetCount(PrimeService_GetCountServer) error
	mustEmbedUnimplementedPrimeServiceServer()
}

// UnimplementedPrimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeServiceServer struct {
}

func (UnimplementedPrimeServiceServer) GetCount(PrimeService_GetCountServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCount not implemented")
}
func (UnimplementedPrimeServiceServer) mustEmbedUnimplementedPrimeServiceServer() {}

// UnsafePrimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeServiceServer will
// result in compilation errors.
type UnsafePrimeServiceServer interface {
	mustEmbedUnimplementedPrimeServiceServer()
}

func RegisterPrimeServiceServer(s grpc.ServiceRegistrar, srv PrimeServiceServer) {
	s.RegisterService(&PrimeService_ServiceDesc, srv)
}

func _PrimeService_GetCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrimeServiceServer).GetCount(&primeServiceGetCountServer{stream})
}

type PrimeService_GetCountServer interface {
	Send(*PrimeResponse) error
	Recv() (*PrimeRequest, error)
	grpc.ServerStream
}

type primeServiceGetCountServer struct {
	grpc.ServerStream
}

func (x *primeServiceGetCountServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *primeServiceGetCountServer) Recv() (*PrimeRequest, error) {
	m := new(PrimeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeService_ServiceDesc is the grpc.ServiceDesc for PrimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PrimeService",
	HandlerType: (*PrimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCount",
			Handler:       _PrimeService_GetCount_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protofiles/Primes.proto",
}
