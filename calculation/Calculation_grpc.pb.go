// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculationServiceClient is the client API for CalculationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationServiceClient interface {
	SumStream(ctx context.Context, opts ...grpc.CallOption) (CalculationService_SumStreamClient, error)
}

type calculationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationServiceClient(cc grpc.ClientConnInterface) CalculationServiceClient {
	return &calculationServiceClient{cc}
}

func (c *calculationServiceClient) SumStream(ctx context.Context, opts ...grpc.CallOption) (CalculationService_SumStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculationService_ServiceDesc.Streams[0], "/mypkg.calculator.v1.CalculationService/SumStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculationServiceSumStreamClient{stream}
	return x, nil
}

type CalculationService_SumStreamClient interface {
	Send(*SumStreamRequest) error
	Recv() (*SumStreamResponse, error)
	grpc.ClientStream
}

type calculationServiceSumStreamClient struct {
	grpc.ClientStream
}

func (x *calculationServiceSumStreamClient) Send(m *SumStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculationServiceSumStreamClient) Recv() (*SumStreamResponse, error) {
	m := new(SumStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculationServiceServer is the server API for CalculationService service.
// All implementations must embed UnimplementedCalculationServiceServer
// for forward compatibility
type CalculationServiceServer interface {
	SumStream(CalculationService_SumStreamServer) error
	mustEmbedUnimplementedCalculationServiceServer()
}

// UnimplementedCalculationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationServiceServer struct {
}

func (UnimplementedCalculationServiceServer) SumStream(CalculationService_SumStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SumStream not implemented")
}
func (UnimplementedCalculationServiceServer) mustEmbedUnimplementedCalculationServiceServer() {}

// UnsafeCalculationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationServiceServer will
// result in compilation errors.
type UnsafeCalculationServiceServer interface {
	mustEmbedUnimplementedCalculationServiceServer()
}

func RegisterCalculationServiceServer(s grpc.ServiceRegistrar, srv CalculationServiceServer) {
	s.RegisterService(&CalculationService_ServiceDesc, srv)
}

func _CalculationService_SumStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculationServiceServer).SumStream(&calculationServiceSumStreamServer{stream})
}

type CalculationService_SumStreamServer interface {
	Send(*SumStreamResponse) error
	Recv() (*SumStreamRequest, error)
	grpc.ServerStream
}

type calculationServiceSumStreamServer struct {
	grpc.ServerStream
}

func (x *calculationServiceSumStreamServer) Send(m *SumStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculationServiceSumStreamServer) Recv() (*SumStreamRequest, error) {
	m := new(SumStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculationService_ServiceDesc is the grpc.ServiceDesc for CalculationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mypkg.calculator.v1.CalculationService",
	HandlerType: (*CalculationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SumStream",
			Handler:       _CalculationService_SumStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protofiles/Calculation.proto",
}
